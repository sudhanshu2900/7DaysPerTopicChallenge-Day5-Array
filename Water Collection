PROBLEM: N = 5
         Arr[] = {3, 0, 2, 0, 4}
Output: 7

Explanation:               __
               __         |__|
              |__|   __   |__|
              |__|  |__|  |__|
              |__|__|__|__|__|
               3  0   2  0  4
               
               
               We can trap "3 units" of water between 3 and 2, "1 unit" on top of bar 2 and "3 units" between 2  and 4.
               
               
SOLUTION:

METHOD 1: O(N) Time and O(1) Space

     int maxWater(int arr[], int n) 
     {    
            int sum=0;
            for(int i=1;i<n-1;i++){
                int lmax=arr[i];
                for(int j=0;j<=i;j++){
                    lmax=max(lmax,arr[j]);
                }
                int rmax=arr[i];
                for(int j=i+1;j<n;j++){
                    rmax=max(rmax,arr[j]);
                }
                sum+=min(lmax,rmax)-arr[i];
            }
            return sum;
      }


METHOD 2: O(N) Time and O(N) Space

     int maxWater(int arr[], int n) 
     {   
            vector<int> l;
            vector<int> r;
            
            int sum=0;
            
            int lmx=arr[0];
            l.push_back(lmx);
           
            for(int i=1;i<n;i++){
                lmx=max(lmx,arr[i]);
                l.push_back(lmx);
            }
            
            int rmx=arr[n-1];
            r.push_back(rmx);
            
            for(int i=n-2;i>=0;i--){
                rmx=max(rmx,arr[i]);
                r.push_back(rmx);
            }
            reverse(r.begin(), r.end());
            
            for(int i=0;i<n;i++){
                sum+=min(l[i],r[i])-arr[i];
            }
            return sum;
    }
    
    
